void processValue(int& x) {
    std::cout << "Processing lvalue: " << x << std::endl;
}

void processValue(int&& x) {
    std::cout << "Processing rvalue: " << x << std::endl;
}

template <typename T>
void callProcessValue(T&& x) {
    processValue(std::forward<T>(x));
}

int main() {
    int a = 10;
    callProcessValue(a);    // 传递左值
    callProcessValue(20);   // 传递右值
    return 0;
}

好处1：利用T&&外能模板，更好的通用性，保留左值、右值的特性，更好的重载。
好处2：更好的性能，值拷贝、引用、移动语义。

完美转发的好处在于它允许泛型函数在不失去参数的左值或右值特性的情况下，将参数传递给其他函数。这在编写泛型代码时非常重要，因为它允许函数模板正确地处理不同类型和值类别的参数。
以下是完美转发的几个好处：
保留值类别： 使用完美转发，函数模板可以将参数按照其原始的值类别传递给其他函数，确保被调用函数得到正确的参数类型。
避免多次拷贝： 在没有完美转发的情况下，如果不加以考虑，传递参数可能会导致多次不必要的拷贝。使用完美转发可以避免这些额外的拷贝操作，提高性能。
支持移动语义： 完美转发对于支持移动语义（move semantics）非常有用。当传递右值时，完美转发可以将其作为右值引用传递，从而支持移动构造函数，从而提高性能。
通用性： 完美转发可以在模板函数中通用地处理各种参数类型，包括不同类型的左值和右值。
综合来说，完美转发在泛型编程中帮助解决参数传递和值类别保留的问题，使得函数模板更加灵活和通用，能够处理多种类型的参数，并且能够正确地应用移动语义，提高代码的性能和效率。
